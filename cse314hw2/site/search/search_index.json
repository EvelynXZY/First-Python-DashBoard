{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSE314 HW2 Python Dashboards Documentation For codes visit EvelynXzy's Github . Agricultral Exports Dataset of U.S. (2011) Contains historical data of agricultural exports of 14 catagories for all states in 2011 Visualized with a eCDF graph Utilizes dcc.Checklist and dcc.Dropdown Apple Stock Dataset (2014) Contains historical data of APPL stock price on each day from 2014-01-02 to 2014-12-12 Visualized with a line graph Utilizes dcc.DatePickerRange American Airlines Flight Path Dataset (2011) Contains airport location data and historical AA flight path data in the U.S. in 2011 Visualized with chained callbacks Utilizes dcc.Checklist and dcc.Dropdown","title":"Home"},{"location":"#cse314-hw2-python-dashboards-documentation","text":"For codes visit EvelynXzy's Github .","title":"CSE314 HW2 Python Dashboards Documentation"},{"location":"#agricultral-exports-dataset-of-us-2011","text":"Contains historical data of agricultural exports of 14 catagories for all states in 2011 Visualized with a eCDF graph Utilizes dcc.Checklist and dcc.Dropdown","title":"Agricultral Exports Dataset of U.S. (2011)"},{"location":"#apple-stock-dataset-2014","text":"Contains historical data of APPL stock price on each day from 2014-01-02 to 2014-12-12 Visualized with a line graph Utilizes dcc.DatePickerRange","title":"Apple Stock Dataset (2014)"},{"location":"#american-airlines-flight-path-dataset-2011","text":"Contains airport location data and historical AA flight path data in the U.S. in 2011 Visualized with chained callbacks Utilizes dcc.Checklist and dcc.Dropdown","title":"American Airlines Flight Path Dataset (2011)"},{"location":"ag/","text":"Agricultral Exports Dataset of U.S. (2011) For full dataset view plotly/datasets/2011_us_ag_exports.csv . Overview Why the visualization is interesting? Users can easily switch between different agricultual product catagory using the dropdown list. Any arbitrary number of the chosen states can be compared at the same time. This visualization includes eCDF . Why eCDFs are preferable to histograms? eCDF is as good as histogram > The clusters of data are easily observed in histograms. But clusters can also be seen in eCDF by finding the decreasing slopes. > Histograms are good for identifying the distribution type of data. eCDF can also achieve this by directly apply the Kolmogorov Smirnov test if the CDF of the expected distribution type is plotted. eCDF is less biased > In histograms, there is a statistically free parameter: binsize. In one way, you want the binsize infinitesimally small, so that the resolution of the curve becomes perfect. On the other side the binsize has to be big enough so that statistical fluctuations do not destroy the smoothness of the underlying curve. The way you bin the data can result in different spread of data, which may influence how you intepret the result. This is called Binning Bias . eCDF handles outliers and infinite values more elegantly > If there is an outlier, the number of bins in the histogram would have to be extended to hold the outlier. If the outlier is far away from the main values and we decide to keep it, the original distribution may become hard to recognize; if we trim the x-axis value, the outlier may not be seen on the diagram at all. In eCDFs, the outlier value is directly visible at the end of the tail. Also the type of the distribution stays visible even with the rescaling of the x-axis as caused by the outlier. > If there is an infinite value, the histogram is unable to show the value. However, in eCDF infinite values can be detected by a line never reaching the upper(y=1) or lower(y=0) boundary. eCDF is more informative > Key values and features like minimum, maximum, median, quantiles, percentiles, etc. can be directly read from the eCDF diagram. > An arbitrary number of eCDFs can be plotted into the same axes without any problems for comparisons. Citations: Paper 1 Website 1 Website 2 Demo Callbacks update_ag_export_fig(states,ag_type) - Update the eCDF figure for the states and ag_type selection Parameters: - state: str a list of state names selected by the checklist - ag_type: str a single agricultral catagory selected by the dropdown - returns: figure an updated eCDF figure that will be passed into the dcc.Graph component","title":"Agricultral Export Dataset"},{"location":"ag/#agricultral-exports-dataset-of-us-2011","text":"For full dataset view plotly/datasets/2011_us_ag_exports.csv .","title":"Agricultral Exports Dataset of U.S. (2011)"},{"location":"ag/#overview","text":"","title":"Overview"},{"location":"ag/#why-the-visualization-is-interesting","text":"Users can easily switch between different agricultual product catagory using the dropdown list. Any arbitrary number of the chosen states can be compared at the same time. This visualization includes eCDF .","title":"Why the visualization is interesting?"},{"location":"ag/#why-ecdfs-are-preferable-to-histograms","text":"eCDF is as good as histogram > The clusters of data are easily observed in histograms. But clusters can also be seen in eCDF by finding the decreasing slopes. > Histograms are good for identifying the distribution type of data. eCDF can also achieve this by directly apply the Kolmogorov Smirnov test if the CDF of the expected distribution type is plotted. eCDF is less biased > In histograms, there is a statistically free parameter: binsize. In one way, you want the binsize infinitesimally small, so that the resolution of the curve becomes perfect. On the other side the binsize has to be big enough so that statistical fluctuations do not destroy the smoothness of the underlying curve. The way you bin the data can result in different spread of data, which may influence how you intepret the result. This is called Binning Bias . eCDF handles outliers and infinite values more elegantly > If there is an outlier, the number of bins in the histogram would have to be extended to hold the outlier. If the outlier is far away from the main values and we decide to keep it, the original distribution may become hard to recognize; if we trim the x-axis value, the outlier may not be seen on the diagram at all. In eCDFs, the outlier value is directly visible at the end of the tail. Also the type of the distribution stays visible even with the rescaling of the x-axis as caused by the outlier. > If there is an infinite value, the histogram is unable to show the value. However, in eCDF infinite values can be detected by a line never reaching the upper(y=1) or lower(y=0) boundary. eCDF is more informative > Key values and features like minimum, maximum, median, quantiles, percentiles, etc. can be directly read from the eCDF diagram. > An arbitrary number of eCDFs can be plotted into the same axes without any problems for comparisons. Citations: Paper 1 Website 1 Website 2","title":"Why eCDFs are preferable to histograms?"},{"location":"ag/#demo","text":"","title":"Demo"},{"location":"ag/#callbacks","text":"update_ag_export_fig(states,ag_type) - Update the eCDF figure for the states and ag_type selection Parameters: - state: str a list of state names selected by the checklist - ag_type: str a single agricultral catagory selected by the dropdown - returns: figure an updated eCDF figure that will be passed into the dcc.Graph component","title":"Callbacks"},{"location":"apple/","text":"Apple Stock Dataset (2014) For full dataset view plotly/datasets/2014_apple_stock.csv . Overview Why the visualization is interesting? Users can easily choose the date range from a calendar. Demo Callbacks update_AAPL_fig(start_date,end_date) - Update x-axis range of the APPL line graph according to the selected date range Parameters: - start_date: date object start date, will be converted to string in YYYY-MM-DD format - end_date: date object end date, will be converted to string in YYYY-MM-DD format - returns: figure a line graph with updated date range that will be passed into the dcc.Graph component","title":"Apple Stock Dataset"},{"location":"apple/#apple-stock-dataset-2014","text":"For full dataset view plotly/datasets/2014_apple_stock.csv .","title":"Apple Stock Dataset (2014)"},{"location":"apple/#overview","text":"","title":"Overview"},{"location":"apple/#why-the-visualization-is-interesting","text":"Users can easily choose the date range from a calendar.","title":"Why the visualization is interesting?"},{"location":"apple/#demo","text":"","title":"Demo"},{"location":"apple/#callbacks","text":"update_AAPL_fig(start_date,end_date) - Update x-axis range of the APPL line graph according to the selected date range Parameters: - start_date: date object start date, will be converted to string in YYYY-MM-DD format - end_date: date object end date, will be converted to string in YYYY-MM-DD format - returns: figure a line graph with updated date range that will be passed into the dcc.Graph component","title":"Callbacks"},{"location":"flight/","text":"American Airlines Flight Path Dataset (2011) For full dataset view 2011_february_aa_flight_paths.csv and 2011_february_us_airport_traffic.csv Overview Why the visualization is interesting? Dataset is visualized on a map. Users can choose filter types to view all flight paths, find flight paths by departure/arrival airports, or flight paths associated with AA hubs. This visualization includes a chained callback . Whenever a filter is selected, a checklist containing the filtered airports will appear for further selection. Demo Callbacks generate_checklist_from_filter(filter_choice): - Generate a checklist of airports based on the filter type selection Parameters: - filter_choice: str a selected filter name from the dropdown list - returns: -- str a list of airport codes that will be the options for the airport checklist -- str a list of airport codes that will be the default 'value' for the for the airport checklist update_flight_map(filter_type, airport_choice): - Update the flight path map based on the current selected filter type and airport checklist selections Parameters: - filter_type: str a selected filter name from the dropdown list - airport_choice: str a list of selected airport codes from the airport checklist - returns: figure an updated flight path map that will be passed into the dcc.Graph component","title":"AA Flight Path Dataset"},{"location":"flight/#american-airlines-flight-path-dataset-2011","text":"For full dataset view 2011_february_aa_flight_paths.csv and 2011_february_us_airport_traffic.csv","title":"American Airlines Flight Path Dataset (2011)"},{"location":"flight/#overview","text":"","title":"Overview"},{"location":"flight/#why-the-visualization-is-interesting","text":"Dataset is visualized on a map. Users can choose filter types to view all flight paths, find flight paths by departure/arrival airports, or flight paths associated with AA hubs. This visualization includes a chained callback . Whenever a filter is selected, a checklist containing the filtered airports will appear for further selection.","title":"Why the visualization is interesting?"},{"location":"flight/#demo","text":"","title":"Demo"},{"location":"flight/#callbacks","text":"generate_checklist_from_filter(filter_choice): - Generate a checklist of airports based on the filter type selection Parameters: - filter_choice: str a selected filter name from the dropdown list - returns: -- str a list of airport codes that will be the options for the airport checklist -- str a list of airport codes that will be the default 'value' for the for the airport checklist update_flight_map(filter_type, airport_choice): - Update the flight path map based on the current selected filter type and airport checklist selections Parameters: - filter_type: str a selected filter name from the dropdown list - airport_choice: str a list of selected airport codes from the airport checklist - returns: figure an updated flight path map that will be passed into the dcc.Graph component","title":"Callbacks"}]}